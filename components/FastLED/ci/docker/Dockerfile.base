# syntax=docker/dockerfile:1.7

# FastLED PlatformIO Base Image - Debian Slim Build
# UV-based build system with glibc for compatibility

# Use Python 3.11 on Debian Bookworm (slim variant for smaller size)
FROM python:3.11-slim-bookworm

# Install essential dependencies:
# - build-essential: gcc, g++, make and other build tools
# - git: required by PlatformIO for platform/library management
# - curl: to install UV
# - wget & unzip: for downloading FastLED project (removed after use)
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        build-essential \
        git \
        curl \
        wget \
        unzip \
        rsync \
        bash \
    && rm -rf /var/lib/apt/lists/*

# Install UV (handles all Python/package management)
# Python is already installed from the base image
RUN curl -LsSf https://astral.sh/uv/install.sh | sh

# Add UV to PATH for subsequent layers
ENV PATH="/root/.local/bin:${PATH}"

# Set environment variable to indicate running inside Docker
ENV FASTLED_DOCKER=1

# Download and extract FastLED project from GitHub (latest release)
# This contains src/, examples/, install, pyproject.toml, ci/, etc.
# Using latest release instead of master to avoid build breakage from unstable code
RUN RELEASE_URL=$(wget -qO- https://api.github.com/repos/FastLED/FastLED/releases/latest | grep "zipball_url" | cut -d '"' -f 4) && \
    wget -q "$RELEASE_URL" -O /tmp/fastled.zip && \
    unzip -q /tmp/fastled.zip -d /tmp && \
    mv /tmp/FastLED-* /fastled && \
    rm -rf /tmp/fastled.zip


# Set working directory to FastLED project root
WORKDIR /fastled

RUN bash install

# Add venv binaries to PATH so 'pio' command is available
ENV PATH="/fastled/.venv/bin:${PATH}"

# Disable PlatformIO update checks for faster builds
RUN pio settings set check_platformio_interval 0

RUN platformio update

# Metadata labels
LABEL maintainer="FastLED Team"
LABEL description="Minimal Alpine-based PlatformIO image with UV and dependencies"
LABEL version="2.0.0"
