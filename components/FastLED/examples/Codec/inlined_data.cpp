#include "fastled_progmem.h"

#include "inlined_data.h"

namespace CodecData {

// JPEG image data (32x32 red-blue checkerboard, 8x8 squares)
// Creates a 4x4 grid of alternating red and blue squares
// Encoded as a standard JPEG image with quality=95
const uint8_t FL_PROGMEM sampleJpegData[] = {
  0xff, 0xd8, 0xff, 0xe0, 0x00, 0x10, 0x4a, 0x46, 0x49, 0x46, 0x00, 0x01,
  0x01, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0xff, 0xdb, 0x00, 0x43,
  0x00, 0x02, 0x01, 0x01, 0x01, 0x01, 0x01, 0x02, 0x01, 0x01, 0x01, 0x02,
  0x02, 0x02, 0x02, 0x02, 0x04, 0x03, 0x02, 0x02, 0x02, 0x02, 0x05, 0x04,
  0x04, 0x03, 0x04, 0x06, 0x05, 0x06, 0x06, 0x06, 0x05, 0x06, 0x06, 0x06,
  0x07, 0x09, 0x08, 0x06, 0x07, 0x09, 0x07, 0x06, 0x06, 0x08, 0x0b, 0x08,
  0x09, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x06, 0x08, 0x0b, 0x0c, 0x0b, 0x0a,
  0x0c, 0x09, 0x0a, 0x0a, 0x0a, 0xff, 0xdb, 0x00, 0x43, 0x01, 0x02, 0x02,
  0x02, 0x02, 0x02, 0x02, 0x05, 0x03, 0x03, 0x05, 0x0a, 0x07, 0x06, 0x07,
  0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,
  0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,
  0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,
  0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a,
  0x0a, 0x0a, 0xff, 0xc0, 0x00, 0x11, 0x08, 0x00, 0x20, 0x00, 0x20, 0x03,
  0x01, 0x22, 0x00, 0x02, 0x11, 0x01, 0x03, 0x11, 0x01, 0xff, 0xc4, 0x00,
  0x1f, 0x00, 0x00, 0x01, 0x05, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05,
  0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0xff, 0xc4, 0x00, 0xb5, 0x10, 0x00,
  0x02, 0x01, 0x03, 0x03, 0x02, 0x04, 0x03, 0x05, 0x05, 0x04, 0x04, 0x00,
  0x00, 0x01, 0x7d, 0x01, 0x02, 0x03, 0x00, 0x04, 0x11, 0x05, 0x12, 0x21,
  0x31, 0x41, 0x06, 0x13, 0x51, 0x61, 0x07, 0x22, 0x71, 0x14, 0x32, 0x81,
  0x91, 0xa1, 0x08, 0x23, 0x42, 0xb1, 0xc1, 0x15, 0x52, 0xd1, 0xf0, 0x24,
  0x33, 0x62, 0x72, 0x82, 0x09, 0x0a, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x25,
  0x26, 0x27, 0x28, 0x29, 0x2a, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a,
  0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x53, 0x54, 0x55, 0x56,
  0x57, 0x58, 0x59, 0x5a, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a,
  0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x83, 0x84, 0x85, 0x86,
  0x87, 0x88, 0x89, 0x8a, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99,
  0x9a, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xb2, 0xb3,
  0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6,
  0xc7, 0xc8, 0xc9, 0xca, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9,
  0xda, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xf1,
  0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xff, 0xc4, 0x00,
  0x1f, 0x01, 0x00, 0x03, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05,
  0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0xff, 0xc4, 0x00, 0xb5, 0x11, 0x00,
  0x02, 0x01, 0x02, 0x04, 0x04, 0x03, 0x04, 0x07, 0x05, 0x04, 0x04, 0x00,
  0x01, 0x02, 0x77, 0x00, 0x01, 0x02, 0x03, 0x11, 0x04, 0x05, 0x21, 0x31,
  0x06, 0x12, 0x41, 0x51, 0x07, 0x61, 0x71, 0x13, 0x22, 0x32, 0x81, 0x08,
  0x14, 0x42, 0x91, 0xa1, 0xb1, 0xc1, 0x09, 0x23, 0x33, 0x52, 0xf0, 0x15,
  0x62, 0x72, 0xd1, 0x0a, 0x16, 0x24, 0x34, 0xe1, 0x25, 0xf1, 0x17, 0x18,
  0x19, 0x1a, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x35, 0x36, 0x37, 0x38, 0x39,
  0x3a, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x53, 0x54, 0x55,
  0x56, 0x57, 0x58, 0x59, 0x5a, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69,
  0x6a, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x82, 0x83, 0x84,
  0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97,
  0x98, 0x99, 0x9a, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa,
  0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xc2, 0xc3, 0xc4,
  0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7,
  0xd8, 0xd9, 0xda, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea,
  0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xff, 0xda, 0x00,
  0x0c, 0x03, 0x01, 0x00, 0x02, 0x11, 0x03, 0x11, 0x00, 0x3f, 0x00, 0xf8,
  0xbe, 0xbe, 0x43, 0xa2, 0xbe, 0xbc, 0xaf, 0xea, 0x8f, 0xf9, 0x57, 0x47,
  0xfd, 0x4f, 0x3f, 0xb7, 0x3f, 0xee, 0x4b, 0xd8, 0x7d, 0x4b, 0xff, 0x00,
  0x0a, 0xfd, 0xaf, 0xb5, 0xfa, 0xdf, 0xfd, 0x3b, 0xe4, 0xf6, 0x7f, 0x6f,
  0x9f, 0xdd, 0xfe, 0xd4, 0xff, 0x00, 0x94, 0xf3, 0xff, 0x00, 0xa9, 0x3f,
  0xf6, 0x3f, 0xfd, 0xcd, 0xfb, 0x6f, 0xad, 0xff, 0x00, 0xe1, 0x2f, 0xb3,
  0xf6, 0x7f, 0x55, 0xfe, 0xff, 0x00, 0x3f, 0x3f, 0xd9, 0xe5, 0xf7, 0x8a,
  0xf9, 0x0e, 0x8a, 0xfa, 0xf2, 0x8f, 0xf9, 0x57, 0x47, 0xfd, 0x4f, 0x3f,
  0xb7, 0x3f, 0xee, 0x4b, 0xd8, 0x7d, 0x4b, 0xff, 0x00, 0x0a, 0xfd, 0xaf,
  0xb5, 0xfa, 0xdf, 0xfd, 0x3b, 0xe4, 0xf6, 0x7f, 0x6f, 0x9f, 0xdd, 0x3f,
  0xe5, 0x3c, 0xff, 0x00, 0xea, 0x4f, 0xfd, 0x8f, 0xff, 0x00, 0x73, 0x7e,
  0xdb, 0xeb, 0x7f, 0xf8, 0x4b, 0xec, 0xfd, 0x9f, 0xd5, 0x7f, 0xbf, 0xcf,
  0xcf, 0xf6, 0x79, 0x7d, 0xe2, 0xbe, 0x43, 0xa2, 0xbe, 0xbc, 0xa3, 0xfe,
  0x55, 0xd1, 0xff, 0x00, 0x53, 0xcf, 0xed, 0xcf, 0xfb, 0x92, 0xf6, 0x1f,
  0x52, 0xff, 0x00, 0xc2, 0xbf, 0x6b, 0xed, 0x7e, 0xb7, 0xff, 0x00, 0x4e,
  0xf9, 0x3d, 0x9f, 0xdb, 0xe7, 0xf7, 0x4f, 0xf9, 0x4f, 0x3f, 0xfa, 0x93,
  0xff, 0x00, 0x63, 0xff, 0x00, 0xdc, 0xdf, 0xb6, 0xfa, 0xdf, 0xfe, 0x12,
  0xfb, 0x3f, 0x67, 0xf5, 0x5f, 0xef, 0xf3, 0xf3, 0xfd, 0x9e, 0x5f, 0x78,
  0xaf, 0x90, 0xe8, 0xaf, 0xaf, 0x28, 0xff, 0x00, 0x95, 0x74, 0x7f, 0xd4,
  0xf3, 0xfb, 0x73, 0xfe, 0xe4, 0xbd, 0x87, 0xd4, 0xbf, 0xf0, 0xaf, 0xda,
  0xfb, 0x5f, 0xad, 0xff, 0x00, 0xd3, 0xbe, 0x4f, 0x67, 0xf6, 0xf9, 0xfd,
  0xd3, 0xfe, 0x53, 0xcf, 0xfe, 0xa4, 0xff, 0x00, 0xd8, 0xff, 0x00, 0xf7,
  0x37, 0xed, 0xbe, 0xb7, 0xff, 0x00, 0x84, 0xbe, 0xcf, 0xd9, 0xfd, 0x57,
  0xfb, 0xfc, 0xfc, 0xff, 0x00, 0x67, 0x97, 0xde, 0xff, 0xd9
};
const size_t sampleJpegDataLength = 898;

// WebP image data containing a 2x2 pixel pattern:
// Top-left=Red, Top-right=White, Bottom-left=Blue, Bottom-right=Black
// Encoded as a standard WebP image with quality=95
const uint8_t FL_PROGMEM sampleWebpData[] = {
  0x52, 0x49, 0x46, 0x46, 0x5e, 0x00, 0x00, 0x00, 0x57, 0x45, 0x42, 0x50,
  0x56, 0x50, 0x38, 0x20, 0x52, 0x00, 0x00, 0x00, 0xf0, 0x02, 0x00, 0x9d,
  0x01, 0x2a, 0x02, 0x00, 0x02, 0x00, 0x00, 0x80, 0x08, 0x25, 0x90, 0x02,
  0x74, 0xba, 0x01, 0xf8, 0x01, 0xf8, 0x00, 0x0f, 0xe0, 0x1f, 0x8e, 0x46,
  0x85, 0x2b, 0xbe, 0x00, 0x00, 0xfe, 0xff, 0xe8, 0x7a, 0x3f, 0xfe, 0xdb,
  0x07, 0xff, 0xe7, 0xcd, 0x3f, 0xc6, 0xe8, 0xe2, 0x38, 0x57, 0x41, 0xa0,
  0xf6, 0x0f, 0x88, 0x7f, 0x58, 0x3a, 0x20, 0xcb, 0x1b, 0xf4, 0x9b, 0xcf,
  0xfd, 0x83, 0xa6, 0x0c, 0xb9, 0xfe, 0x2b, 0xdf, 0xfb, 0xc6, 0x77, 0xbd,
  0x0b, 0xff, 0xce, 0x00, 0x00, 0x00
};
const size_t sampleWebpDataLength = 102;

// GIF image data (32x32 red-blue checkerboard, animated with 2 frames)
// Frame 1: Standard checkerboard (red starts at top-left)
// Frame 2: Inverted checkerboard (blue starts at top-left)
// Animation duration: 500ms per frame, loops forever
const uint8_t FL_PROGMEM sampleGifData[] = {
  0x47, 0x49, 0x46, 0x38, 0x39, 0x61, 0x20, 0x00, 0x20, 0x00, 0x81, 0x00,
  0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x21, 0xff, 0x0b, 0x4e, 0x45, 0x54, 0x53, 0x43, 0x41, 0x50, 0x45,
  0x32, 0x2e, 0x30, 0x03, 0x01, 0x00, 0x00, 0x00, 0x21, 0xf9, 0x04, 0x00,
  0x32, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x20,
  0x00, 0x00, 0x08, 0x9e, 0x00, 0x01, 0x08, 0x1c, 0x28, 0x30, 0x80, 0xc1,
  0x83, 0x06, 0x09, 0x12, 0x44, 0x88, 0x50, 0xe1, 0x40, 0x86, 0x07, 0x1d,
  0x16, 0x84, 0x18, 0x40, 0x22, 0x00, 0x8a, 0x15, 0x25, 0x62, 0xb4, 0xb8,
  0x51, 0x23, 0x45, 0x8e, 0x1f, 0x3d, 0x42, 0x04, 0x39, 0x52, 0x24, 0x43,
  0x92, 0x27, 0x4d, 0x36, 0x54, 0x19, 0x91, 0x25, 0xc6, 0x84, 0x2e, 0x33,
  0x3a, 0xec, 0x38, 0x33, 0x64, 0xcd, 0x92, 0x37, 0x53, 0xe6, 0x5c, 0xb9,
  0xb3, 0x65, 0x4f, 0x98, 0x3f, 0x65, 0x2a, 0xa4, 0x39, 0xd4, 0x66, 0x51,
  0x9c, 0x47, 0x75, 0x26, 0xe5, 0xb9, 0xd4, 0xa7, 0xc5, 0xa6, 0x40, 0xa1,
  0x0a, 0x5d, 0x68, 0x94, 0x2a, 0x52, 0xab, 0x4a, 0xb1, 0x32, 0xd5, 0xea,
  0x94, 0x6b, 0x54, 0xaf, 0x53, 0x1f, 0x56, 0x15, 0x7b, 0x95, 0x6c, 0x56,
  0xb3, 0x5b, 0xd1, 0x76, 0x55, 0xfb, 0x95, 0xed, 0x4b, 0x94, 0x69, 0x27,
  0x96, 0x95, 0x7b, 0x96, 0x6e, 0xdc, 0x8b, 0x63, 0xed, 0xae, 0xd5, 0xdb,
  0x96, 0x6f, 0x58, 0xbf, 0x70, 0xf7, 0xe2, 0x9d, 0x3b, 0xb8, 0x6e, 0xe1,
  0xbb, 0x44, 0xc1, 0x5a, 0x0c, 0x08, 0x00, 0x21, 0xf9, 0x04, 0x01, 0x32,
  0x00, 0x02, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x20, 0x00,
  0x81, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x08, 0x9e, 0x00, 0x03, 0x08, 0x1c, 0x28, 0x10, 0x80, 0xc1, 0x83,
  0x06, 0x09, 0x12, 0x44, 0x88, 0x50, 0xe1, 0x40, 0x86, 0x07, 0x1d, 0x16,
  0x84, 0x08, 0x40, 0x62, 0x00, 0x8a, 0x15, 0x25, 0x62, 0xb4, 0xb8, 0x51,
  0x23, 0x45, 0x8e, 0x1f, 0x3d, 0x42, 0x04, 0x39, 0x52, 0x24, 0x43, 0x92,
  0x27, 0x4d, 0x36, 0x54, 0x19, 0x91, 0x25, 0xc6, 0x84, 0x2e, 0x33, 0x3a,
  0xec, 0x38, 0x33, 0x64, 0xcd, 0x92, 0x37, 0x53, 0xe6, 0x5c, 0xb9, 0xb3,
  0x65, 0x4f, 0x98, 0x3f, 0x65, 0x2a, 0xa4, 0x39, 0xd4, 0x66, 0x51, 0x9c,
  0x47, 0x75, 0x26, 0xe5, 0xb9, 0xd4, 0xa7, 0xc5, 0xa6, 0x40, 0xa1, 0x0a,
  0x5d, 0x68, 0x94, 0x2a, 0x52, 0xab, 0x4a, 0xb1, 0x32, 0xd5, 0xea, 0x94,
  0x6b, 0x54, 0xaf, 0x53, 0x1f, 0x56, 0x15, 0x7b, 0x95, 0x6c, 0x56, 0xb3,
  0x5b, 0xd1, 0x76, 0x55, 0xfb, 0x95, 0xed, 0x4b, 0x94, 0x69, 0x27, 0x96,
  0x95, 0x7b, 0x96, 0x6e, 0xdc, 0x8b, 0x63, 0xed, 0xae, 0xd5, 0xdb, 0x96,
  0x6f, 0x58, 0xbf, 0x70, 0xf7, 0xe2, 0x9d, 0x3b, 0xb8, 0x6e, 0xe1, 0xbb,
  0x44, 0xc1, 0x5a, 0x0c, 0x08, 0x00, 0x3b
};
const size_t sampleGifDataLength = 415;

// MPEG1 video data (minimal header) representing 2x2 pixel patterns:
// Frame 0: Top-left=Red, Top-right=White, Bottom-left=Blue, Bottom-right=Black
// Frame 1: Top-left=White, Top-right=Blue, Bottom-left=Black, Bottom-right=Red
// Note: This is a minimal MPEG1 sequence header for testing purposes
const uint8_t FL_PROGMEM sampleMpeg1Data[] = {
  0x00, 0x00, 0x01, 0xb3, 0x00, 0x10, 0x00, 0x10, 0x14, 0x08, 0xff, 0xff,
  0x00, 0x00, 0x01, 0x00, 0x00, 0x08, 0x00, 0x00, 0x01, 0xb7
};
const size_t sampleMpeg1DataLength = 22;

} // namespace CodecData
