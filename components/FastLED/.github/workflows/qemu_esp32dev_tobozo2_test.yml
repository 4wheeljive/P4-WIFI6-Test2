name: ESP32-DEV QEMU Test (Merged-Bin)

on:
  workflow_dispatch:
  push:
    branches: [master]
    paths:
      - 'src/**/*.cpp'
      - 'src/**/*.h'
      - 'examples/**/*.ino'
      - 'examples/**/*.cpp'
      - 'examples/**/*.h'
      - 'platformio.ini'
      - 'CMakeLists.txt'
      - 'library.json'
      - '.github/workflows/qemu_esp32dev_tobozo2_test.yml'
      - '.github/workflows/qemu_template.yml'
  pull_request:
    branches: [master]
    paths:
      - 'src/**/*.cpp'
      - 'src/**/*.h'
      - 'examples/**/*.ino'
      - 'examples/**/*.cpp'
      - 'examples/**/*.h'
      - 'platformio.ini'
      - 'CMakeLists.txt'
      - 'library.json'
      - '.github/workflows/qemu_esp32dev_tobozo2_test.yml'
      - '.github/workflows/qemu_template.yml'

permissions:
  contents: read
  pull-requests: read

jobs:
  qemu_test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        sketch: [Blink, BlinkParallel]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install uv
        uses: astral-sh/setup-uv@v6

      - name: Install dependencies
        run: |
          echo "=== Installing dependencies ==="
          uv sync
          uv pip install platformio esptool

          echo "=== Environment ==="
          python --version
          uv run pio --version

      - name: Build with merged binary
        run: |
          echo "=== Building ${{ matrix.sketch }} for esp32dev ==="
          echo "Build command:"
          echo "  uv run ci/ci-compile.py esp32dev --examples ${{ matrix.sketch }} --merged-bin -o qemu-build/merged.bin"

          set -x
          uv run ci/ci-compile.py esp32dev \
            --examples ${{ matrix.sketch }} \
            --merged-bin \
            -o qemu-build/merged.bin \
            --defines FASTLED_ESP32_IS_QEMU \
            --verbose
          set +x

          echo "=== Build Complete ==="

      - name: Verify merged binary
        run: |
          echo "=== Binary Validation ==="

          if [ ! -f qemu-build/merged.bin ]; then
            echo "❌ Merged binary not found!"
            echo "Build directory contents:"
            ls -laR .build/esp32dev || true
            exit 1
          fi

          echo "✅ Merged binary exists"

          # Check size
          SIZE=$(stat -c%s qemu-build/merged.bin)
          echo "Binary size: $SIZE bytes"

          if [ $SIZE -lt 100000 ]; then
            echo "❌ Binary too small: $SIZE bytes"
            exit 1
          fi

          # Check ESP32 application magic byte at offset 0x10000 (application location)
          MAGIC=$(xxd -s 0x10000 -p -l 1 qemu-build/merged.bin)
          if [ "$MAGIC" = "e9" ]; then
            echo "✅ Valid ESP32 application magic byte (0xE9) at offset 0x10000"
          else
            echo "❌ Invalid magic byte at 0x10000: 0x$MAGIC (expected 0xE9)"
            exit 1
          fi

          # Show hex dump at application location
          echo "=== Binary Header at 0x10000 (application location, first 32 bytes) ==="
          xxd -s 0x10000 -l 32 qemu-build/merged.bin

          # MD5 checksum
          echo "=== Binary Checksum ==="
          md5sum qemu-build/merged.bin

      - name: Run QEMU
        id: qemu
        uses: tobozo/esp32-qemu-sim@v2.1.0
        with:
          flash-image: qemu-build/merged.bin  # Single merged file!
          chip: esp32
          qemu-timeout: "120"
          timeout-interrupt-regex: "Test finished.*completed.*iterations|Starting loop iteration 2"
          debug: true

      - name: Display QEMU output
        if: always()
        run: |
          echo "=== QEMU Results ==="
          echo "Conclusion: ${{ steps.qemu.conclusion }}"
          echo "Outcome: ${{ steps.qemu.outcome }}"

          if [ -f logs.txt ]; then
            echo "=== QEMU Output (first 100 lines) ==="
            head -100 logs.txt

            echo "=== Output Summary ==="
            echo "Total lines: $(wc -l < logs.txt)"
            echo "Boot messages: $(grep -c 'rst:' logs.txt || echo 0)"
            echo "Setup messages: $(grep -c 'setup starting' logs.txt || echo 0)"
            echo "Loop iterations: $(grep -c 'Starting loop iteration' logs.txt || echo 0)"
          fi

      - name: Validate output
        run: |
          echo "=== Validating ${{ matrix.sketch }} output ==="

          if [ ! -f logs.txt ]; then
            echo "❌ No QEMU output found"
            exit 1
          fi

          # Check for crash patterns
          if grep -q "guru meditation\|abort()" logs.txt; then
            echo "❌ QEMU crashed!"
            grep -A 10 "guru meditation\|abort()" logs.txt
            exit 1
          fi

          # Check for expected output
          if grep -q "${{ matrix.sketch }} setup starting" logs.txt; then
            echo "✅ Setup message found"
          else
            echo "❌ Setup message not found"
            exit 1
          fi

          echo "=== Validation complete ==="

      - name: Upload logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: qemu-failure-esp32dev-${{ matrix.sketch }}-${{ github.sha }}
          path: |
            logs.txt
            qemu-build/
          include-hidden-files: true

      - name: Upload logs on success
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: qemu-success-esp32dev-${{ matrix.sketch }}-${{ github.sha }}
          path: logs.txt

      - name: Summary
        if: always()
        run: |
          echo "=== Test Summary ==="
          echo "Platform: esp32dev (merged-bin)"
          echo "Sketch: ${{ matrix.sketch }}"
          echo "Status: ${{ job.status }}"

          if [ -f logs.txt ]; then
            echo "QEMU output lines: $(wc -l < logs.txt)"
          fi
